<launch>

    <node name="segway_rmp_node" pkg="segway_rmp" type="segway_rmp_node" output="screen" required="true">
        <!-- If you want to do Serial -->
        <param name="interface_type" type="str" value="serial" />
        <param name="serial_port" type="str" value="/dev/ttyUSB0" />  
        
        <!-- If a cmd_vel is not received every segway_motor_timeout seconds, the Segway will stop -->
        <param name="motor_timeout" type="double" value="0.1" />
        
        <!-- This is the frame_id of the odometry -->
        <param name="frame_id" type="str" value="base_link" />
        
        <!-- This will invert linear velocity commands -->
        <param name="invert_linear_vel_cmds" type="bool" value="false" />
        
        <!-- This will invert linear velocity commands -->
        <param name="invert_angular_vel_cmds" type="bool" value="false" />
        
        <!-- Enabled/Disable TF broadcasting -->
        <param name="broadcast_tf" type="bool" value="true" />
        
        <!-- Set RMP200/400 or RMP50/100, '200/400' or '50/100' -->
        <!-- <param name="rmp_type" type="str" value="50/100" /> -->
        <param name="rmp_type" type="str" value="200/400" />
        
        <!-- Commonly you need to remap to just /cmd_vel from /<node_name>/cmd_vel -->
        <remap from="~cmd_vel" to="/cmd_vel" />

        <!-- Set linear and angular acceleration limits in m/s^2 and degree/s^2 respectively -->
         <param name="linear_pos_accel_limit" type="double" value="0.5" />
         <param name="linear_neg_accel_limit" type="double" value="0.5" />
         <param name="angular_pos_accel_limit" type="double" value="45.0" />
         <param name="angular_neg_accel_limit" type="double" value="45.0" />

        <!-- velocity limits -->
        <param name="max_linear_vel" type="double" value="0.75" />
        <param name="max_angular_vel" type="double" value="0.5" />

        <!-- linear scaling parameters for odometry. Use 2.0 for RMP 50 -->
        <!-- <param name="linear_odom_scale" type="double" value="1.0" /> -->
        <!-- <param name="angular_odom_scale" type="double" value="1.0" /> -->

        <!-- software odometry reset (used when integrator reset in h/w fails) -->
        <!-- <param name="reset_odometry" value="true" /> -->
        <!-- <param name="odometry_reset_duration" value="1.0" /> -->

    </node>

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find social_segway)/urdf/lidar.xacro'" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node name="sick_tim571_node" pkg="sick_tim" type="sick_tim551_2050001" respawn="false" output="screen">
    <!-- default values: -->
    <!--
      <param name="min_ang" type="double" value="-2.35619449019" />
      <param name="max_ang" type="double" value="2.35619449019" />
      <param name="intensity" type="bool" value="True" />
      <param name="skip" type="int" value="0" />
      <param name="frame_id" type="str" value="laser" />
      <param name="time_offset" type="double" value="-0.001" />
      <param name="publish_datagram" type="bool" value="False" />
      <param name="subscribe_datagram" type="bool" value="false" />
      <param name="device_number" type="int" value="0" />
      <param name="range_min" type="double" value="0.05" />
    -->
    <param name="range_max" type="double" value="25.0" />

    <!-- Older versions of the scanner firmware report an incorrect time_increment.
         If you get a warning about time_increment, uncomment this. -->
    <!-- <param name="time_increment" type="double" value="0.000061722" /> -->

  </node>
  <node pkg="tf" type="static_transform_publisher" name="base_to_lidar_broadcaster" args="0 0 0.5 1.57 0 0 base_link laser_mount_link 100" />

1 <node pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen" name="laser_filter">
      
      <rosparam command="load" file="$(find social_segway)/filters/angle_filter_middle.yaml" />
</node>
</launch>
